// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for TaskStatusStatus.
const (
	Failed  TaskStatusStatus = "failed"
	Pending TaskStatusStatus = "pending"
	Success TaskStatusStatus = "success"
	Unknown TaskStatusStatus = "unknown"
)

// Interface defines model for Interface.
type Interface struct {
	Address *string `json:"address,omitempty"`
	Gateway *string `json:"gateway,omitempty"`
	Mask    *string `json:"mask,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// NetworkConfig defines model for NetworkConfig.
type NetworkConfig struct {
	Hostname   *string      `json:"hostname,omitempty"`
	Interfaces *[]Interface `json:"interfaces,omitempty"`
}

// TaskStatus defines model for TaskStatus.
type TaskStatus struct {
	Id     openapi_types.UUID `json:"id"`
	Status TaskStatusStatus   `json:"status"`
}

// TaskStatusStatus defines model for TaskStatus.Status.
type TaskStatusStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/3SSsVLDMAyGX6UnGH1tgc0rUxeWsnEdRKy0JrFsbJnS6+XdObtpOyQsOcW/pHz5kjM0",
	"3gXPxJJAnyE1B3JYyw0LxRYbKjch+kBRLNUIjYmUaimnQKAhSbS8h0HBHoWOeJrNHKZuNmB0NBMM6nri",
	"P7+okdL6RnL0sXv13Nr9FO3gk/yzTYG9vlJttUKuFo+RWtDwsLq7WI0iVncLlf93cxl6vpFhjHiaR33H",
	"1G0FJacppzXl2vroUEBDztaAmhKn2zhxdqA/IHPH/sigIBCb0qYg5aYp30NBi7YnAzs1ozLSd7aRTNlS",
	"nzYu303Qh+qq9VWilb5ko/fFRfxiO/4oCn4oJusZNDwt18t1ofaBGIMFDS/1SEFAOSTQnPt++AsAAP//",
	"k0veX3QCAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
